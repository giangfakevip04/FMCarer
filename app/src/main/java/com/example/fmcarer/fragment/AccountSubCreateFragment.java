package com.example.fmcarer.fragment;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

import com.example.fmcarer.R;
import com.example.fmcarer.model_call_api.SubUserRequest;
import com.example.fmcarer.network.ApiClient;
import com.example.fmcarer.network.ApiService;
import com.example.fmcarer.response.ApiResponse;
import com.google.gson.Gson;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;


public class AccountSubCreateFragment extends Fragment {

    private EditText editFullName, editPhone, editPassword;
    private Spinner spinnerRelationship;
    private Button btnSave;

    private final String[] relationships = {"Cha", "M·∫π", "Anh", "Ch·ªã", "√îng", "B√†"};

    // ƒê√£ lo·∫°i b·ªè: private Login_Activity loginActivity; // Kh√¥ng c√≤n c·∫ßn thi·∫øt

    private SharedPreferences userSessionPrefs; // Khai b√°o SharedPreferences cho phi√™n ng∆∞·ªùi d√πng

    // ƒê·ªãnh nghƒ©a c√°c kh√≥a cho SharedPreferences (ph·∫£i kh·ªõp v·ªõi c√°c kh√≥a c·ªßa Login_Activity)
    private static final String PREF_USER_SESSION = "user_session";
    private static final String KEY_AUTH_TOKEN = "token";
    private static final String KEY_USER_ID = "_id";
    private static final String TAG = "AccountSubCreateFragment"; // Tag cho Logcat

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_account_sub_create, container, false);

        // √Ånh x·∫° view
        editFullName = view.findViewById(R.id.editFullName);
        editPhone = view.findViewById(R.id.editSubPhone);
        editPassword = view.findViewById(R.id.editSubPassword);
        spinnerRelationship = view.findViewById(R.id.spinnerRelationship);
        btnSave = view.findViewById(R.id.btnSaveSubAccount);

        // C√†i ƒë·∫∑t Spinner
        ArrayAdapter<String> adapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_spinner_item, relationships);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnerRelationship.setAdapter(adapter);

        // Kh·ªüi t·∫°o SharedPreferences phi√™n ng∆∞·ªùi d√πng
        userSessionPrefs = requireContext().getSharedPreferences(PREF_USER_SESSION, Context.MODE_PRIVATE);

        // ƒê√£ lo·∫°i b·ªè: loginActivity = new Login_Activity(); // Kh√¥ng c√≤n c·∫ßn thi·∫øt

        // B·∫Øt s·ª± ki·ªán n√∫t L∆∞u
        btnSave.setOnClickListener(v -> handleSaveSubUser());

        return view;
    }

    private void handleSaveSubUser() {
        String fullname = editFullName.getText().toString().trim();
        String phone = editPhone.getText().toString().trim();
        String password = editPassword.getText().toString().trim();
        String relationship = spinnerRelationship.getSelectedItem().toString();

        // L·∫•y parentId v√† token t·ª´ SharedPreferences
        String parentId = userSessionPrefs.getString(KEY_USER_ID, null);
        String authToken = userSessionPrefs.getString(KEY_AUTH_TOKEN, null);

        if (TextUtils.isEmpty(parentId)) {
            Toast.makeText(getContext(), "Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n ch√≠nh (Parent ID). Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", Toast.LENGTH_SHORT).show();
            return;
        }

        if (TextUtils.isEmpty(authToken)) {
            Toast.makeText(getContext(), "Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i t√†i kho·∫£n ch√≠nh.", Toast.LENGTH_SHORT).show();
            return;
        }

        if (TextUtils.isEmpty(phone) || TextUtils.isEmpty(password)) {
            Toast.makeText(getContext(), "S·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc", Toast.LENGTH_SHORT).show();
            return;
        }

        SubUserRequest request = new SubUserRequest(fullname, "", phone, password, parentId, relationship);

        // üëâ In log ƒë·ªÉ debug n·∫øu c·∫ßn
        Log.d(TAG, "Request Body: " + new Gson().toJson(request));
        Log.d(TAG, "Parent ID: " + parentId);
        Log.d(TAG, "Auth Token (first 10 chars): " + (authToken != null ? authToken.substring(0, Math.min(authToken.length(), 10)) : "null"));
        // Th√™m log cho s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u
        Log.d(TAG, "Phone: " + phone);
        Log.d(TAG, "Password: " + password);


        // S·ª≠ d·ª•ng getAuthenticatedInstance v√¨ ƒë√¢y l√† m·ªôt cu·ªôc g·ªçi c·∫ßn x√°c th·ª±c
        ApiService apiService = ApiClient.getInstance(getContext()).create(ApiService.class);

        // Th√™m "Bearer " v√†o tr∆∞·ªõc token
        String bearerToken = "Bearer " + authToken;

        // G·ªçi API v·ªõi token x√°c th·ª±c
        Call<ApiResponse> call = apiService.createOrUpdateSubUser(bearerToken, request);
        call.enqueue(new Callback<ApiResponse>() {
            @Override
            public void onResponse(@NonNull Call<ApiResponse> call, @NonNull Response<ApiResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    Toast.makeText(getContext(), response.body().getMessage(), Toast.LENGTH_LONG).show();
                    // C√≥ th·ªÉ reset form ho·∫∑c ƒëi·ªÅu h∆∞·ªõng sau khi t·∫°o th√†nh c√¥ng
                    editFullName.setText("");
                    editPhone.setText("");
                    editPassword.setText("");
                    spinnerRelationship.setSelection(0); // Reset spinner
                } else {
                    String errorMessage = "Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n ph·ª•";
                    if (response.errorBody() != null) {
                        try {
                            // C·ªë g·∫Øng ƒë·ªçc l·ªói t·ª´ errorBody
                            ApiResponse errorResponse = new Gson().fromJson(response.errorBody().charStream(), ApiResponse.class);
                            if (errorResponse != null && !TextUtils.isEmpty(errorResponse.getMessage())) {
                                errorMessage = errorResponse.getMessage();
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "Error parsing error body: " + e.getMessage());
                        }
                    }
                    Toast.makeText(getContext(), errorMessage, Toast.LENGTH_LONG).show();
                    Log.e(TAG, "Response not successful: " + response.code() + " " + response.message());
                }
            }

            @Override
            public void onFailure(@NonNull Call<ApiResponse> call, @NonNull Throwable t) {
                Toast.makeText(getContext(), "L·ªói k·∫øt n·ªëi: " + t.getMessage(), Toast.LENGTH_LONG).show();
                Log.e(TAG, "Network error: " + t.getMessage(), t);
            }
        });
    }
}