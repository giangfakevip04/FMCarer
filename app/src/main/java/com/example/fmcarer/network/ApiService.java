package com.example.fmcarer.network;

import com.example.fmcarer.model.Children;
import com.example.fmcarer.model.Post;
import com.example.fmcarer.model_call_api.OTPRequest;
import com.example.fmcarer.model_call_api.PostRequest;
import com.example.fmcarer.model_call_api.SubUserLoginRequest;
import com.example.fmcarer.model_call_api.SubUserRequest;
import com.example.fmcarer.model_call_api.UserRequest;
import com.example.fmcarer.model_call_api.UserUpdateRequest;
import com.example.fmcarer.response.ApiResponse;
import com.example.fmcarer.response.CareScheduleResponse;
import com.example.fmcarer.response.ChildrenResponse;
import com.example.fmcarer.response.ImageUploadResponse;
import com.example.fmcarer.response.MultiImageUploadResponse;
import com.example.fmcarer.response.OTPResponse;
import com.example.fmcarer.response.PostResponse;
import com.example.fmcarer.response.SingleCareScheduleResponse;
import com.example.fmcarer.response.UserListResponse;
import com.example.fmcarer.response.UserResponse;

import java.util.List;
import java.util.Map;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Multipart;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Part;
import retrofit2.http.Path;
import retrofit2.http.Query;

public interface ApiService {
    // üîí USER AUTHENTICATION
    @GET("/api/users")
    Call<UserListResponse> getAllUsers(); // ‚úÖ Tr·∫£ v·ªÅ danh s√°ch users (·∫©n password)

    @POST("/api/users/register")
    Call<UserResponse> registerUser(@Body UserRequest request); // ‚úÖ ƒêƒÉng k√Ω

    @POST("/api/users/login")
    Call<UserResponse> loginUser(@Body UserRequest request); // ‚úÖ ƒêƒÉng nh·∫≠p ch√≠nh

    @POST("/api/users/send-otp")
    Call<OTPResponse> sendOtp(@Body OTPRequest request); // ‚úÖ G·ª≠i OTP

    @POST("/api/users/update")
    Call<UserResponse> updateUser(@Body UserUpdateRequest request); // ‚úÖ C·∫≠p nh·∫≠t user

    @Multipart
    @POST("/api/users/upload-avatar")
    Call<UserResponse> uploadImage(
            @Part("userId") RequestBody userId,
            @Part MultipartBody.Part avatar
    ); // ‚úÖ Upload avatar

    // üîß Sub-user (t√†i kho·∫£n ph·ª•) - ƒê√£ ƒë·ªìng b·ªô ho√†n to√†n v·ªõi Backend Router v√† Controller
    @POST("/api/users/login-subuser")
    Call<UserResponse> loginSubUser(@Body SubUserLoginRequest request); // ‚úÖ ƒêƒÉng nh·∫≠p t√†i kho·∫£n ph·ª•

    @POST("/api/users/subuser/create-or-update")
    Call<ApiResponse> createOrUpdateSubUser(
            @Header("Authorization") String bearerToken, // Th√™m header x√°c th·ª±c
            @Body SubUserRequest subUser
    ); // ‚úÖ Th√™m/s·ª≠a sub user

    @GET("/api/users/subusers/parent/{parentId}")
    Call<UserListResponse> getAllSubusersByParentId(
            @Header("Authorization") String bearerToken, // Th√™m header x√°c th·ª±c
            @Path("parentId") String parentId
    ); // ‚úÖ L·∫•y t·∫•t c·∫£ danh s√°ch subuser c·ªßa m·ªôt parent

    @GET("/api/users/subuser/{subuserId}")
    Call<UserResponse> getSubuserById(
            @Header("Authorization") String bearerToken, // Th√™m header x√°c th·ª±c
            @Path("subuserId") String subuserId
    ); // ‚úÖ L·∫•y th√¥ng tin m·ªôt subuser c·ª• th·ªÉ

    @DELETE("/api/users/subuser/{subuserId}")
    Call<ApiResponse> deleteSubuser(
            @Header("Authorization") String bearerToken, // Th√™m header x√°c th·ª±c
            @Path("subuserId") String subuserId
    ); // ‚úÖ X√≥a m·ªôt subuser


    // ‚úÖ 1. L·∫•y danh s√°ch tr·∫ª c·ªßa ng∆∞·ªùi d√πng (d·ª±a theo token)
    @GET("/api/children/my")
    Call<ChildrenResponse> getChildrenByUser(@Header("Authorization") String bearerToken);

    // ‚úÖ 2. L·∫•y chi ti·∫øt 1 tr·∫ª theo ID
    @GET("/api/children/{childId}")
    Call<Children> getChildById(@Header("Authorization") String bearerToken, @Path("childId") String childId);

    // ‚úÖ 3. Th√™m tr·∫ª m·ªõi (d·ª±a theo token)
    @POST("/api/children")
    Call<Children> addChild(@Header("Authorization") String bearerToken, @Body Children child);

    // ‚úÖ 4. C·∫≠p nh·∫≠t th√¥ng tin tr·∫ª
    @PUT("/api/children/{childId}")
    Call<Children> updateChild(@Header("Authorization") String bearerToken, @Path("childId") String childId, @Body Children updatedChild);

    // ‚úÖ 5. X√≥a tr·∫ª
    @DELETE("/api/children/{childId}")
    Call<Void> deleteChild(@Header("Authorization") String bearerToken, @Path("childId") String childId);


    // ‚úÖ Care Schedules / Reminders


    // ‚úÖ T·∫°o reminder m·ªõi
    // Backend: router.post('/', requireAuth, controller.createReminder);
    @POST("/api/reminders")
    Call<SingleCareScheduleResponse> createReminder(
            @Header("Authorization") String token,
            @Body Map<String, Object> reminderData // ƒê·ªïi t√™n cho r√µ r√†ng h∆°n
    );

    // ‚úÖ L·∫•y to√†n b·ªô reminder c·ªßa user (t·ª´ token)
    // Backend: router.get('/', requireAuth, controller.getRemindersByUser);
    @GET("/api/reminders")
    Call<CareScheduleResponse> getAllReminders(
            @Header("Authorization") String token
    );

    // ‚úÖ L·∫•y reminder theo ID (c√≥ ki·ªÉm tra user)
    // Backend: router.get('/:id', requireAuth, controller.getReminderById);
    @GET("/api/reminders/{id}")
    Call<SingleCareScheduleResponse> getReminderById(
            @Header("Authorization") String token,
            @Path("id") String reminderId // T√™n @Path "id" kh·ªõp v·ªõi backend
    );

    // ‚úÖ C·∫≠p nh·∫≠t reminder (c√≥ ki·ªÉm tra user)
    // Backend: router.put('/:id', requireAuth, controller.updateReminder);
    @PUT("/api/reminders/{id}")
    Call<SingleCareScheduleResponse> updateReminder(
            @Header("Authorization") String token,
            @Path("id") String reminderId,
            @Body Map<String, Object> updateData
    );

    // ‚úÖ Xo√° reminder (c√≥ ki·ªÉm tra user)
    // Backend: router.delete('/:id', requireAuth, controller.deleteReminder);
    @DELETE("/api/reminders/{id}")
    Call<ApiResponse> deleteReminder(
            @Header("Authorization") String token,
            @Path("id") String reminderId
    );

    // ‚úÖ ƒê√°nh d·∫•u ho√†n th√†nh (c√≥ ki·ªÉm tra user)
    // Backend: router.put('/:id/complete', requireAuth, controller.completeReminder);
    @PUT("/api/reminders/{id}/complete")
    Call<SingleCareScheduleResponse> completeReminder(
            @Header("Authorization") String token,
            @Path("id") String reminderId // ƒê·ªïi t√™n tham s·ªë cho nh·∫•t qu√°n
    );

    // ‚úÖ L·∫•y danh s√°ch reminder theo childId (c√≥ ki·ªÉm tra user)
    // Backend: router.get('/by-child/:childId', requireAuth, controller.getRemindersByChild);
    @GET("/api/reminders/by-child/{childId}")
    Call<CareScheduleResponse> getRemindersByChild(
            @Header("Authorization") String token,
            @Path("childId") String childId // T√™n @Path "childId" kh·ªõp v·ªõi backend
    );
    // ‚úÖ T·∫°o b√†i vi·∫øt m·ªõi - ƒê·ªìng b·ªô v·ªõi backend
    @POST("/api/posts")
    Call<PostResponse> createPost(@Body PostRequest postRequest);

    // ‚úÖ L·∫•y t·∫•t c·∫£ b√†i vi·∫øt - ƒê·ªìng b·ªô v·ªõi backend
    @GET("/api/posts")
    Call<List<Post>> getAllPosts();

    // ‚ö†Ô∏è L·∫•y danh s√°ch b√†i vi·∫øt theo userId (l·ªçc theo user)
    // Gi·∫£ s·ª≠ backend s·∫Ω l·∫Øng nghe query param "userId" tr√™n endpoint /api/posts
    @GET("/api/posts")
    Call<List<Post>> getPostsByUserId(@Query("userId") String userId);

    // ‚úÖ C·∫≠p nh·∫≠t b√†i vi·∫øt - ƒê·ªìng b·ªô v·ªõi backend
    @PUT("/api/posts/{postId}")
    Call<Post> updatePost(@Path("postId") String postId, @Body Post updatedPost);

    // ‚úÖ X√≥a b√†i vi·∫øt - ƒê·ªìng b·ªô v·ªõi backend
    @DELETE("/api/posts/{postId}")
    Call<ApiResponse> deletePost(@Path("postId") String postId);

    //‚úÖ Upload m·ªôt ·∫£nh
    @Multipart
    @POST("/api/upload")
    Call<ImageUploadResponse> uploadSingleImage(@Part MultipartBody.Part image);

    // ‚úÖ Upload nhi·ªÅu ·∫£nh c√πng l√∫c
    @Multipart
    @POST("/api/upload-multiple")
    Call<MultiImageUploadResponse> uploadMultipleImages(@Part List<MultipartBody.Part> images);

}

