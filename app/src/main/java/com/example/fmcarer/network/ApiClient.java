package com.example.fmcarer.network;

import android.content.Context;

import com.example.fmcarer.change.AuthInterceptor;

import java.util.concurrent.TimeUnit;

import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class ApiClient {
    // ‚úÖ ƒê·∫£m b·∫£o ƒë√¢y l√† IP backend c·ªßa b·∫°n (ch·ªâ gi·ªØ 1 d√≤ng BASE_URL)
    private static final String BASE_URL = "http://192.168.1.9:5000/"; // Ho·∫∑c "http://10.0.2.2:6000/" cho m√°y gi·∫£ l·∫≠p

    private static Retrofit retrofit;
    private static OkHttpClient okHttpClient; // M·ªôt instance duy nh·∫•t c·ªßa OkHttpClient

    // üîπ T·∫°o Retrofit v·ªõi header Authorization n·∫øu c√≥ token trong SharedPreferences
    // ƒê·∫£m b·∫£o method n√†y ƒë∆∞·ª£c g·ªçi ·ªü nh·ªØng n∆°i c·∫ßn x√°c th·ª±c (v√≠ d·ª•: Home_Fragment, Post_ADAPTER)
    public static Retrofit getInstance(Context context) {
        // Ch·ªâ kh·ªüi t·∫°o OkHttpClient m·ªôt l·∫ßn duy nh·∫•t
        if (okHttpClient == null) {
            okHttpClient = new OkHttpClient.Builder()
                    .addInterceptor(new AuthInterceptor(context)) // ‚úÖ S·ª¨ D·ª§NG L·ªöP AuthInterceptor C·ª¶A B·∫†N
                    .connectTimeout(30, TimeUnit.SECONDS)
                    .readTimeout(30, TimeUnit.SECONDS)
                    .build();
        }

        // Ch·ªâ kh·ªüi t·∫°o Retrofit m·ªôt l·∫ßn duy nh·∫•t
        if (retrofit == null) {
            retrofit = new Retrofit.Builder()
                    .baseUrl(BASE_URL)
                    .addConverterFactory(GsonConverterFactory.create())
                    .client(okHttpClient) // ‚úÖ S·ª≠ d·ª•ng OkHttpClient ƒë√£ c√≥ AuthInterceptor
                    .build();
        }
        return retrofit;
    }

    // üîπ N·∫øu mu·ªën g·ªçi Retrofit KH√îNG token (v√≠ d·ª• g·ªçi public API)
    // B·∫°n c√≥ th·ªÉ gi·ªØ l·∫°i ho·∫∑c x√≥a b·ªè n·∫øu kh√¥ng c·∫ßn thi·∫øt
    public static Retrofit getInstanceWithoutAuth() {
        // ƒê·∫£m b·∫£o kh√¥ng s·ª≠ d·ª•ng chung instance okHttpClient v·ªõi getInstance(context)
        OkHttpClient clientWithoutAuth = new OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .build();

        return new Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(GsonConverterFactory.create())
                .client(clientWithoutAuth)
                .build();
    }

    // Constructor ri√™ng t∆∞ ƒë·ªÉ ngƒÉn vi·ªác t·∫°o nhi·ªÅu instance
    private ApiClient() {
        // private constructor
    }
}